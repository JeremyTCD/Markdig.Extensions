<#@ template debug="false" hostspecific="true" language="C#" #><#@ output extension=".cs" #><#@ 
assembly name="System.Core" #><#@ 
import namespace="System.Text" #><#@ 
import namespace="System.IO" #><#@ 
import namespace="System.Linq" #><#@ 
import namespace="System.Text.RegularExpressions" #><#@ 
import namespace="System.Collections.Generic" #><#@ 
import namespace="System.Threading" #>
using Xunit;

namespace Jering.Markdig.Extensions.FlexiBlocks.Tests.Specs
{
<#
    List<Spec> specs = CommonMarkSpecsParser.ParseSpecs(Host.ResolvePath("../../../specs/CommonMarkSpecs.json"));
#>    public class CommonMarkSpecs
    {
<#  
    for (int i = 0; i < specs.Count; i++)
    {
        Spec spec = specs[i];
#><#= i > 0 ? "\n" : string.Empty #>        [Fact]
        public void <#= spec.Section #>_Spec<#= spec.Example #>()
        {
            // Line number in CommonMark Specs: <#= spec.StartLine #>
            // Markdown: <#= spec.Markdown #>
            // Expected HTML: <#= spec.Html #>

            SpecTestHelper.AssertCompliance("<#= spec.Markdown #>",
                "<#= spec.Html #>",
                "all",
                true);
        }
<#
    }
#>    }
}

<#+
public class Spec
{
    public string Markdown { get; set; }
    public string Html { get; set; }
    public string Example { get; set; }
    public string StartLine { get; set; }
    public string Section { get; set; }
}

public class CommonMarkSpecsParser
{
    private static StringBuilder _stringBuilder = new StringBuilder();

    public static List<Spec> ParseSpecs(string fileName)
    {
        string json = File.ReadAllText(fileName);
        List<Spec> result = new List<Spec>();
        
        // Difficult to use third party libararies in T4 templates, use Regex to extract values from JSON.
        // Not super efficient, but won't run often, perhaps once every few years when the spec is updated.
        MatchCollection matches = Regex.Matches(json, @"{\s+""end_line"": (.*?),\s+""section"": ""(.*?[^\\])"",\s+""html"": ""(.*?[^\\])"",\s+""markdown"": ""(.*?[^\\])"",\s+""example"": (.*?),\s+""start_line"": (.*?)\s+}");

        for(int i = 0; i < matches.Count; i++)
        {
            Match match = matches[i];
            GroupCollection groups = match.Groups;
            result.Add(new Spec{Markdown = groups[4].Value, Html = groups[3].Value, Example = groups[5].Value, StartLine = groups[6].Value, Section = ToPascalCase(groups[2].Value)});
        }

        
        return result;
    }

    private static string ToPascalCase(string text)
    {
        _stringBuilder.Length = 0;
        
        bool justParsedSpace = false;
        for(int i = 0; i < text.Length; i++)
        {
            char currentChar = text[i];
        
            if(currentChar == ' ')
            {
                justParsedSpace = true;
            }
            else if(justParsedSpace)
            {
                _stringBuilder.Append(char.ToUpper(currentChar));
                justParsedSpace = false;
            }
            else
            {
                _stringBuilder.Append(currentChar);
            }
        }

        return _stringBuilder.ToString();
    }
}
#>
